#!/hive/groups/recon/local/bin/python

import os
import subprocess
import tempfile
import argparse
from cluster_utils import *

HAL_PREFIX='/hive/users/ksenia/apps/hal/bin/'
debug=True

def create_bed(hal, query, chromosome):
    bed_tmp=tempfile.NamedTemporaryFile(mode='w+t',delete=(not debug))
    size = get_size(chromosome, query, hal)
    bed_tmp.write(chromosome + ' 0 ' + str(size)+'\n')
    bed_tmp.flush()
    bed_tmp.seek(0)
    return bed_tmp

def lift_chromosome(hal, query, query_bed, target, psl) :
    target_psl_tmp = tempfile.NamedTemporaryFile(mode='w+t',delete=(not debug))
    files = [hal, query, query_bed, target, target_psl_tmp.name]
    command = [os.path.join(HAL_PREFIX, 'halLiftover'), '--outPSL'] + files
    subprocess.check_call(command)
    target_psl_tmp.flush()
    target_psl_tmp.seek(0)
    #if not os.stat(target_psl_tmp.name).st_size:
    #    raise Exception('target psl file is empty!')
    command = ['pslPosTarget', target_psl_tmp.name, psl]
    subprocess.check_call(command)
    target_psl_tmp.close()
    

def run(hal, query, target, chromosome, psl) :
    query_bed = create_bed(hal, query, chromosome)
    if not os.stat(query_bed.name).st_size:
        raise Exception('query bed file is empty!') 
    lift_chromosome(hal, query, query_bed.name, target, psl)
    #if not os.stat(psl).st_size:
    #    raise Exception('psl for chromosome ', chromosome, ' is empty!')
    query_bed.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='run halLiftover to map one specific chromosome of query to target')
    parser.add_argument('hal')
    parser.add_argument('query',help='query species name')
    parser.add_argument('target', help='target species name')
    parser.add_argument('chromosome',help='query chromosome name')
    parser.add_argument('psl',help='output psl')
    args = parser.parse_args()
    run(args.hal, args.query, args.target, args.chromosome, args.psl)

