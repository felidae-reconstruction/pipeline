#!/hive/groups/recon/local/bin/python

from ConfigParser import SafeConfigParser
import argparse
import os
import subprocess
import tempfile
import utils

config_parser = SafeConfigParser()
config_parser.read('../etc/chaining.config')

DATA_ROOT = config_parser.get('environment','DATA_ROOT')
VERSION = config_parser.get('environment','VERSION')
NAME = config_parser.get('environment','NAME')
WORKING_DIR = os.path.join(DATA_ROOT, 'comparative', NAME, VERSION)

KENT_TOOLS_PREFIX = '/cluster/bin/x86_64/'

def get_sizes(genome):
    tmp=tempfile.NamedTemporaryFile(mode='w+t')
    command = [os.path.join(KENT_TOOLS_PREFIX,'twoBitInfo'), genome, tmp.name]
    subprocess.check_call(command)
    return tmp

def run(psl, query_genome, target_genome, output):
    sizes_query = get_sizes(query_genome)
    sizes_target = get_sizes(target_genome)
    chain_dir = os.path.join(WORKING_DIR,'chain')
    chain_file = os.path.join(chain_dir,utils.get_name(output)+'.chain')
    axtChain = [os.path.join(KENT_TOOLS_PREFIX,'axtChain'), '-psl', '-verbose=0', '-minScore=5000', '-linearGap=medium', 
                    psl, target_genome, query_genome, chain_file]
    subprocess.check_call(axtChain)
    sorted_chain_file = os.path.join(chain_dir,utils.get_name(output)+'.sorted.chain')
    axtSortedChain = [os.path.join(KENT_TOOLS_PREFIX,'chainSort'), chain_file, sorted_chain_file] 
    subprocess.check_call(axtSortedChain)

    chainAntiRepeat = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'chainAntiRepeat'), target_genome, query_genome, chain_file, 'stdout'])
    chainPreNet = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'chainPreNet'), 'stdin', sizes_target.name, sizes_query.name, 'stdout'])
    chainNet = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'chainNet'), 'stdin -minSpace=1', sizes_target.name, sizes_query.name, 'stdout /dev/null'])
    netSyntenic = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'netSyntenic'), 'stdin stdout'])
    netClass = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'netClass'), ' -verbose=0 -noAr', 'stdin', 'markdEmptyForNetClass', 'markdEmptyForNetClass', 'stdout'])
    netFilter = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'netFilter'), '-minGap=10 stdin >', os.path.join(WORKING_DIR, output)])
    #netFilter = ' '.join([os.path.join(KENT_TOOLS_PREFIX,'netFilter'), '-syn stdin >', os.path.join(WORKING_DIR, output)])
    command = ' | '.join([chainAntiRepeat, chainPreNet, chainNet, netSyntenic, netFilter])
    #command = ' | '.join([chainAntiRepeat, chainPreNet, chainNet, netSyntenic, netClass, netFilter])
    subprocess.check_call(command, shell=True) 
    sizes_query.close()
    sizes_target.close()

if __name__ == '__main__' :
    parser = argparse.ArgumentParser()
    parser.add_argument('psl',help='query mapped on target psl')
    parser.add_argument('query_genome',help='query 2bit file')
    parser.add_argument('target_genome',help='target 2bit file')
    parser.add_argument('output',help='name of the output net file')
    args = parser.parse_args()
    run(args.psl, args.query_genome, args.target_genome, args.output)
